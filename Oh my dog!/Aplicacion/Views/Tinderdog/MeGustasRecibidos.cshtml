@using System.Security.Claims;
@model Aplicacion.Models.TinderdogViewModel

@{
    ViewData["Title"] = "TinderDog";
}

<style>
    .b-example-divider {
        height: 3rem;
        background-color: rgba(0, 0, 0, .1);
        border: solid rgba(0, 0, 0, .15);
        border-width: 1px 0;
        box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
    }

    .card-body {
        position: relative;
        padding: 0px;
    }

    .card-text {
        position: absolute;
        top: 90%;
        left: 5%;
        transform: translate(-0%, -50%);
    }

    .logo-img {
        width: 3rem;
        height: 3rem;
        transform: translateY(-0.4rem);
    }

    .container-heart{
        position: absolute;
        top: 80%;
        left: 47%;
        transform: translate(-0%, -50%);
    }

    .heart {
        background-color: red;
        height: 30px;
        width: 30px;
        transform: rotate(-45deg);
        animation: pulse 1s infinite;
    }

    .heart::before, .heart::after {
        content: "";
        background: red;
        border-radius: 50%;
        position: absolute;
        height: 30px;
        width: 30px;
    }

    .heart::before {
        top: -15px;
    }

    .heart::after {
        left: 15px;
    }

    @@keyframes pulse {
        75% {
            transform: rotate(-45deg) scale(1.1);
        }
    }

    .tooltip-success {
        --bs-tooltip-bg: var(--bs-success);
    }

    .tooltip-danger {
        --bs-tooltip-bg: var(--bs-danger);
    }

    .cupid {
        position: absolute;
        top: -37.5%;
        right: 0%;
        transform: translateX(100%);
        animation: flying-cupid 10s linear infinite;
        border-radius: 50%;
        width: 170px;
    }

    @@keyframes flying-cupid {
        0% {
            transform: translateX(100%);
        }

        50% {
            transform: translateX(-300%);
        }

        100% {
            transform: translateX(100%);
        }
    }
</style>


<div class="text-center" style="background-color: #FFE5DB; padding-top: 16px; padding-bottom: 16px;">
    <h1 class="display-7">
        <img class="logo-img" src="~/img/tinderdog - logo.png" />
        Me gustas de "@Model.Perro.Nombre"
        <i class="fa-sharp fa-solid fa-fire"></i>
    </h1>
    <p style="margin-bottom: 0px;">
        Listado de candidatos que gustan de su perro publicado en "tinderDog"
    </p>
</div>

<div class="container-fluid" id="ContainerListarMisCandidatos">
    @await Html.PartialAsync("_ListarMegustasRecibidos", Model.Publicaciones)
</div>
<div class="b-example-divider"></div>

<!--Modal para contactar Match-->
<div class="modal fade" id="ModalContactarMatch" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">
                    <i class="fa-solid fa-heart fa-xl"></i>
                    <i class="fa-solid fa-envelope fa-xl"></i>
                    Contactar Flechazo
                </h1>
                <!--<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>-->
            </div>
            <div class="modal-body">
                <form autocomplete="off" class="row g-3 needs-validation Formulario" novalidate id="FormContactoMatch">
                    <div class="col-md-12">
                        <label class="form-label">Remitente</label>
                        <input type="email" class="form-control" id="Remitente" name="Remitente" value="@User.FindFirstValue("Email")" readonly>
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Destinatario</label>
                        <input type="email" class="form-control" id="Destinatario" name="Destinatario" readonly>
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Asunto</label>
                        <input type="text" class="form-control" maxlength="50" id="Asunto" name="Asunto" readonly>
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Mensaje</label>
                        <textarea class="form-control InputText" maxlength="500" id="Contenido" name="Contenido" required></textarea>
                        <div class="invalid-feedback">
                            Ingresa un mensaje a incluir en el cuerpo del correo (máximo 500 caracteres)
                        </div>
                    </div>
                    <input type="hidden" id="idPerroContacto" />
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary BtnCancelarForm" id="BtnCancelarContacto" data-bs-dismiss="modal">Cancelar</button>
                        <button type="button" class="btn btn-primary BtnEnvioForm" onclick="EnviarCorreoMatch()" disabled id="BtnContacto">Aceptar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!--SWAL de cupido-->
<template id="Cupido">
    <swal-html>
        <img src="~/img/cupidDog.gif" alt="Cupid" class="cupid">
        <img src="~/img/match.png" width="200" alt="img-match" />
        <h4>
            ¿Quiere romper el hielo enviando el primer mensaje a su "Flechazo"?
        </h4>
    </swal-html>
    <swal-button type="confirm">
        Contactar
    </swal-button>
    <swal-button type="cancel">
        Cancelar
    </swal-button>
    <swal-param name="allowEscapeKey" value="false" />
</template>

@section Scripts{
    <!-- Constantes de inicializacion de tooltips -->
    <script>

        function InicializarTooltips() {
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
            const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
        }

        $(document).ready(function () {
            InicializarTooltips();
        });
    </script>

    <!--Validacion de relleno de formulario-->
    <script>
        // --> RESET DE FORMULARIOS MEDIANTE BOTON CANCELAR <--
        function ResetFormulario(boton) {
            var formulario = boton.closest("form");
            var campos = formulario.querySelectorAll(".InputText");

            campos.forEach(function (campo) {
                campo.value = '';
                if (campo.classList.contains("is-valid")) {
                    campo.classList.remove("is-valid");
                }
                if (campo.classList.contains("is-invalid")) {
                    campo.classList.remove("is-invalid");
                }
            });

            var botonEnvio = formulario.querySelector(".BtnEnvioForm");
            botonEnvio.disabled = true;
        }
        var botonesCancelar = document.querySelectorAll(".BtnCancelarForm");
        botonesCancelar.forEach(function (elemento) {
            elemento.addEventListener('click', function () {
                ResetFormulario(this);
            });
        });

        // --> VALIDACION DE FORMULARIOS PARA BOTON ACEPTAR <--
        var formularios = document.querySelectorAll(".Formulario");
        var botonesEnvio = document.querySelectorAll(".BtnEnvioForm");

        function ValidarFormulario() {
            var formulario = this;
            var campos = formulario.querySelectorAll(".InputText");
            var todosValidos = true;

            campos.forEach(function (campo) {
                if (!campo.classList.contains("is-valid")) {
                    todosValidos = false;
                    return;
                }
            });

            var botonEnvio = formulario.querySelector(".BtnEnvioForm");
            if (todosValidos) {
                botonEnvio.disabled = false;
            } else {
                botonEnvio.disabled = true;
            }
        }

        // --> VALIDACION DE INPUT TEXT <--
        function ValidarInputText() {
            if (this.value.trim() !== '') {
                this.classList.remove('is-invalid');
                this.classList.add('is-valid');
            } else {
                this.classList.remove('is-valid');
                this.classList.add('is-invalid');
            }
        }

        formularios.forEach(function (formulario) {
            var campos = formulario.querySelectorAll(".InputText");
            campos.forEach(function (campo) {
                campo.addEventListener("input", function () {
                    if (campo.classList.contains("InputText")) {
                        ValidarInputText.call(campo);
                    }
                    ValidarFormulario.call(formulario);
                });
            });
        });
    </script>

    <!--Accion MeGusta / NoMegusta-->
    <script>
        const Toast = Swal.mixin({
            toast: true,
            position: 'bottom',
            showConfirmButton: false,
            timer: 4000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        })

        function VisualizarContacto(idPerro) {
            $.ajax({
                url: '@Url.Action("VisualizarContacto", "Tinderdog")',
                type: 'GET',
                data: { idPerro: idPerro },
                success: function (data) {
                    if (data.success) {
                        document.getElementById('Destinatario').value = data.emailDueno;
                        document.getElementById('idPerroContacto').value = data.idPerro;
                        document.getElementById('Asunto').value = "Contacto de flechazo por " + data.nombrePerro;
                        $('#ModalContactarMatch').modal('show');
                    }
                },
                error: function (xhr, status, error) {
                    console.log(xhr);
                    console.log(status);
                    console.log(error);
                }
            });
        }

        function EnviarCorreoMatch() {
            var remitente = document.getElementById('Remitente').value;
            var destinatario = document.getElementById('Destinatario').value;
            var asunto = document.getElementById('Asunto').value;
            var contenido = document.getElementById('Contenido').value;
            $.ajax({
                url: '@Url.Action("ContactarMatch", "Tinderdog")',
                type: 'POST',
                data: { remitente: remitente, destinatario: destinatario, asunto: asunto, contenido: contenido },
                success: function (data) {
                    if (data.success) {
                        Toast.fire({
                            icon: 'success',
                            text: '¡Se ha enviado el correo a su flechazo!'
                        })
                        var boton = document.getElementById('BtnCancelarContacto');
                        boton.click();
                        $('#ModalContactarMatch').modal('hide');
                    }
                },
                error: function (xhr, status, error) {
                    console.log(xhr);
                    console.log(status);
                    console.log(error);
                }
            });
        }

        function MeGusta() {
            var idPerroEmisor = @Model.Perro.Id;
            var idPerroReceptor = document.getElementById('BtnMeGusta').value;
            $.ajax({
                url: '@Url.Action("MeGusta", "Tinderdog")',
                type: 'POST',
                data: { idPerroEmisor: idPerroEmisor, idPerroReceptor: idPerroReceptor },
                success: function (data) {
                    if (data.match) {
                        Swal.fire({
                            template: '#Cupido'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                VisualizarContacto(idPerroReceptor);
                            } else {

                            }
                        })
                    }
                    ListarMeGustasRecibidos();
                },
                error: function (xhr, status, error) {
                    console.log(xhr);
                    console.log(status);
                    console.log(error);
                }
            });
        }

        function NoMeGusta() {
            var idPerroEmisor = @Model.Perro.Id;
            var idPerroReceptor = document.getElementById('BtnMeGusta').value;
            $.ajax({
                url: '@Url.Action("NoMeGusta", "Tinderdog")',
                type: 'POST',
                data: { idPerroEmisor: idPerroEmisor, idPerroReceptor: idPerroReceptor },
                success: function (data) {
                    if (data.success) {
                        ListarMeGustasRecibidos();
                    }
                },
                error: function (xhr, status, error) {
                    console.log(xhr);
                    console.log(status);
                    console.log(error);
                }
            });
        }
    </script>

    <!--Listar sugerencias-->
    <script>
        function ListarMeGustasRecibidos() {
            var idPerro = @Model.Perro.Id;
            $.ajax({
                url: '@Url.Action("ListarMeGustasRecibidos", "Tinderdog")',
                type: 'GET',
                data: { idPerro: idPerro },
                success: function (data) {
                    $('#ContainerListarMisCandidatos').html(data);
                    InicializarTooltips();
                },
                error: function (xhr, status, error) {
                    console.log(xhr);
                    console.log(status);
                    console.log(error);
                }
            });
        }
    </script>
}